generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PersonaFacet {
  HER
  HIM
  COUPLES
}

enum ProductBadge {
  NUEVO
  TOP
  PROMO
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Category {
  id            Int             @id @default(autoincrement())
  slug          String          @unique
  label         String
  image         String?
  tagline       String?
  subtitle      String?
  accentColor   String?
  description   String?
  personaFacet  PersonaFacet?
  isSensitive   Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  sections      MenuSection[]
  subcategories Subcategory[]
  aliases       SubcategoryAlias[]
  products      Product[]
  collectionTargets CollectionTarget[]
}

model MenuSection {
  id          Int          @id @default(autoincrement())
  name        String
  order       Int          @default(0)
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  subcategories Subcategory[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([categoryId, name])
}

model Subcategory {
  id            Int          @id @default(autoincrement())
  slug          String
  label         String
  description   String?
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    Int
  menuSection   MenuSection? @relation(fields: [menuSectionId], references: [id])
  menuSectionId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  aliases       SubcategoryAlias[]
  products      Product[]
  collectionTargets CollectionTarget[]

  @@unique([categoryId, slug])
}

model SubcategoryAlias {
  id            Int          @id @default(autoincrement())
  aliasSlug     String       @unique
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Collection {
  id          Int                @id @default(autoincrement())
  slug        String             @unique
  name        String
  description String?
  criteria    Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  targets     CollectionTarget[]
}

model CollectionTarget {
  id            Int          @id @default(autoincrement())
  collection    Collection   @relation(fields: [collectionId], references: [id])
  collectionId  Int
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
  includeAll    Boolean      @default(false)
  createdAt     DateTime     @default(now())

  @@unique([collectionId, categoryId, subcategoryId])
}

model Product {
  id              Int               @id @default(autoincrement())
  externalId      Int?              @unique
  slug            String            @unique
  name            String
  shortDescription String?
  descriptionHtml String?
  descriptionText String?
  regularPrice    Decimal           @db.Numeric(12, 2)
  salePrice       Decimal?          @db.Numeric(12, 2)
  stockStatus     String?
  sku             String?
  nsfw            Boolean           @default(true)
  bestSeller      Boolean           @default(false)
  badge           ProductBadge?
  rating          Float?            @default(0)
  reviewCount     Int?              @default(0)
  embeddingText   String?
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id])
  subcategoryId   Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  images          ProductImage[]
  attributes      ProductAttribute[]
  tags            ProductTag[]
  orderItems      OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  sortOrder Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ProductAttribute {
  id        Int     @id @default(autoincrement())
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@unique([productId, key])
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  type      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@unique([productId, type, value])
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String?
  role         UserRole  @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orders       Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  user          User?       @relation(fields: [userId], references: [id])
  userId        Int?
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Numeric(12, 2)
  discountTotal Decimal     @db.Numeric(12, 2) @default(0)
  coupon        Coupon?     @relation(fields: [couponId], references: [id])
  couponId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
  unitPrice  Decimal  @db.Numeric(12, 2)
}

model Coupon {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  discountPct Float?
  discountAmt Decimal?  @db.Numeric(12, 2)
  activeFrom  DateTime?
  activeUntil DateTime?
  usageLimit  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
}

model SiteSetting {
  key       String  @id
  value     Json
  updatedAt DateTime @updatedAt
}
